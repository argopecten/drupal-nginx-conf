#######################################################
###  nginx.conf common Drupal config start
#######################################################

###
### Use the main site name if available, instead of
### potentially virtual server_name when alias is set
### as redirection target. See #2358977 for details.
###
if ($main_site_name = '') {
  set $main_site_name "$server_name";
}

### Deny not compatible request methods without 405 response.
if ( $request_method !~ ^(?:GET|HEAD|POST|PUT|DELETE|OPTIONS)$ ) { return 403; }

### Deny listed arguments in request line for security reasons.
#   like d10.local/node/1?w=document.cookie
if ($is_denied) { return 403; }

### Deny listed requests for security reasons.
if ($is_blocked_uri) { return 403; }

### The files/styles support for images
location ~* ^/sites/.*/files/styles/(.*)$ {
  try_files  /sites/$main_site_name/files/styles/$1 $uri @drupal;
  # test only:
  add_header X-styles "URI: $uri";
}

### Private downloads are always sent to the drupal backend.
location ~* ^/sites/.*/files/private/ {
  rewrite    ^/sites/.*/files/private/(.*)$ $scheme://$main_site_name/system/files/private/$1 permanent;
  try_files  $uri @drupal;
  # test only:
  add_header X-private "URI: $uri";
}
### Deny direct access to private downloads
location ~* ^/sites/.*/private/ {
  internal;
}
location ~* /files/private/ {
  internal;
}

### Map /files/ shortcut early to avoid overrides in other locations.
location ^~ /files/ {
  ### Sub-location to support files/styles with short URIs.
  location ~* /files/styles/(.*)$ {
    rewrite  ^/files/(.*)$  /sites/$main_site_name/files/$1 last;
    try_files  /sites/$main_site_name/files/styles/$1 $uri @drupal;
  }
  location ~* ^.+\.(?:pdf|jpe?g|gif|png|ico|bmp|svg|swf|docx?|xlsx?|pptx?|tiff?|txt|rtf|vcard|vcf|cgi|bat|pl|dll|class|otf|ttf|woff2?|eot|less|avi|mpe?g|mov|wmv|mp3|ogg|ogv|wav|midi|zip|tar|t?gz|rar|dmg|exe|apk|pxl|ipa|css|js)$ {
    rewrite  ^/files/(.*)$  /sites/$main_site_name/files/$1 last;
    try_files   $uri =404;
  }
  try_files $uri @drupal;
}

### Send requests with /external/ and /system/ URI keywords to @drupal.
location ~* /(?:external|system)/ {
  try_files  $uri @drupal;
}

### Serve static files & images directly, without standard drupal rewrites and php-fpm
# pictures:      jpe?g|gif|png|ico|bmp|svg|swf|tiff?
# media:         mp3|wav|midi
# archive:
# office:        docx?|xlsx?|pptx?|txt|rtf|vcard|vcf
# executable:    cgi|bat|pl|dll|class|less
# fonts:         otf|ttf|woff2?|eot
location ~* ^.+\.(?:jpe?g|gif|png|ico|bmp|svg|swf|docx?|xlsx?|pptx?|tiff?|txt|rtf|vcard|vcf|cgi|bat|pl|dll|class|otf|ttf|woff2?|eot|less|mp3|wav|midi)$ {
  rewrite     ^/.+/sites/.+/files/(.*)$  /sites/$main_site_name/files/$1 last;
  try_files   $uri =404;
  # test only:
  add_header X-image "URI: $uri site: $main_site_name";
}

### Allow php files from /modules, /libraries and profiles
location ~* /(?:modules|libraries|profiles)/(?:contrib/|custom/)?.*/.*\.php$ {
  try_files    $uri =404;
  fastcgi_pass unix:/var/run/php/php$V-fpm.sock;
}

### Deny crawlers and never cache known AJAX requests.
location ~* /(?:ahah|ajax|batch|autocomplete|done|progress/|x-progress-id|js/.*) {
  if ( $is_bot ) { return 403; }
  try_files $uri @drupal;
}

### If exist, serve static files directly, otherwise pass to drupal
location ~* ^/sites/.*/files/ {
  if ( $is_bot ) { return 403; }
  try_files $uri @drupal;
}

### Protect from DoS attempts on never cached uri.
location ~* ^/(?:admin|user) {
  if ( $is_bot )             { return 403; }
  if ( $is_authorized = "" ) { return 301 $scheme://$main_site_name;  }
  try_files $uri @drupal;
}
location ~* ^/(node/((?:[0-9]+/?(edit|delete|revisions|comment/reply))|add)) {
  if ( $is_bot )                { return 403; }
  if ( $is_authenticated = "" ) { return 403; }
  try_files $uri @drupal;
}

### set authorization cookie needed to access login page
location /backdoor {
  add_header Set-Cookie login_user_token=$lut always;
  return 301 $scheme://$main_site_name/user/login;
}

### Catch-all: serve request (for static files) if file exists, otherwise route to drupal.
location / {
  try_files $uri @drupal;
}

### Route request to drupal with clean URLs support.
location @drupal {
  try_files $uri /index.php?$query_string;
}

### Route PHP requests to FastCGI servers
location = /index.php {
  # capturing the $fastcgi_script_name variable (first) and the $fastcgi_path_info variable
  fastcgi_split_path_info ^(.+?\.php)(|/.*)$;

  # Ensure the php file exists. Mitigates CVE-2019-11043
  try_files $fastcgi_script_name =404;

  # Parameter passed to the FastCGI server
  include fastcgi_params;
  fastcgi_param HTTP_PROXY      "";  # Block httpoxy attacks. See https://httpoxy.org/.
  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # the script name to be executed by PHP
  fastcgi_param PATH_INFO       $fastcgi_path_info; #
  fastcgi_param QUERY_STRING    $query_string; # pass request parameters to PHP

  # passing FastCGI server responses (300 or higher) to clients
  fastcgi_intercept_errors      on;

  # address of the FastCGI server, as unix socket path
  fastcgi_pass unix:/run/php/php$V-fpm.sock;
}

### Allow access to authorize.php, update.php and install.php only for logged in users.
location ~* ^/(?:core/)?(?:authorize|update|install)\.php$ {
  error_page 418 = @allowupdate;
  if ( $is_authenticated ) { return 418; }
  return 404;
}
location @allowupdate {
  try_files    $uri =404; ### check for existence of php file first
  fastcgi_pass unix:/run/php/php$V-fpm.sock;
}

### Block php files not matched by any other regex in locations above
location ~* ^.+\.php$ {
  return 404;
}

#######################################################
###  nginx.conf common Drupal config end
#######################################################
